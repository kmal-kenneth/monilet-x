// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class Native {
  Future<int> getTotalMemory({dynamic hint});

  Future<int> getUsedMemory({dynamic hint});

  Future<double> getCpuUsed({dynamic hint});

  Future<int> getCpuFrequency({dynamic hint});
}

class NativeImpl extends FlutterRustBridgeBase<NativeWire> implements Native {
  factory NativeImpl(ffi.DynamicLibrary dylib) =>
      NativeImpl.raw(NativeWire(dylib));

  NativeImpl.raw(NativeWire inner) : super(inner);

  Future<int> getTotalMemory({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_total_memory(port_),
        parseSuccessData: _wire2api_u64,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "get_total_memory",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<int> getUsedMemory({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_used_memory(port_),
        parseSuccessData: _wire2api_u64,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "get_used_memory",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<double> getCpuUsed({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_cpu_used(port_),
        parseSuccessData: _wire2api_f32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "get_cpu_used",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<int> getCpuFrequency({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_cpu_frequency(port_),
        parseSuccessData: _wire2api_u64,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "get_cpu_frequency",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  // Section: api2wire

  // Section: api_fill_to_wire

}

// Section: wire2api
double _wire2api_f32(dynamic raw) {
  return raw as double;
}

int _wire2api_u64(dynamic raw) {
  return raw as int;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_get_total_memory(
    int port_,
  ) {
    return _wire_get_total_memory(
      port_,
    );
  }

  late final _wire_get_total_memoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_total_memory');
  late final _wire_get_total_memory =
      _wire_get_total_memoryPtr.asFunction<void Function(int)>();

  void wire_get_used_memory(
    int port_,
  ) {
    return _wire_get_used_memory(
      port_,
    );
  }

  late final _wire_get_used_memoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_used_memory');
  late final _wire_get_used_memory =
      _wire_get_used_memoryPtr.asFunction<void Function(int)>();

  void wire_get_cpu_used(
    int port_,
  ) {
    return _wire_get_cpu_used(
      port_,
    );
  }

  late final _wire_get_cpu_usedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_cpu_used');
  late final _wire_get_cpu_used =
      _wire_get_cpu_usedPtr.asFunction<void Function(int)>();

  void wire_get_cpu_frequency(
    int port_,
  ) {
    return _wire_get_cpu_frequency(
      port_,
    );
  }

  late final _wire_get_cpu_frequencyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_cpu_frequency');
  late final _wire_get_cpu_frequency =
      _wire_get_cpu_frequencyPtr.asFunction<void Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
